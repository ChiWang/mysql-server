Session extends Context

  /** Get mappings for a table or class. 
   * The result is a fully resolved TableMapping
   * The parameter may be a table name, a mapped constructor function, or
   * a domain object. 
   * @param table the table name or constructor of a mapped class
   * @param callback function to be called when mapping has been resolved, with parameters:
   *   err: the node.js Error object
   *   mapping: the mapping for the parameter
   * @throws Error if the parameter is not an object, string, or function
   * @return undefined
   */
  getMapping(Object domainObjectTableNameOrConstructor, Function(Object err, Object mapping [,...]) callback[,...]);

    /** getQueryBuilder(): not part of this version.
     *
     */
    
    /** createQuery(): not part of this version. 
     *
     */

    /** Create an empty batch.
     *
     * The batch is used to collect multiple operations to be executed together. 
     */ 
    Batch createBatch();

    /** List all current batches.
     */
    Array listBatches();

    /** Get the current Transaction. 
     * @return the transaction
     */
    Transaction currentTransaction();

    /** Close this session. This must be called when the session is
     * no longer needed.
     * 
     */
    void close(Function(Object error) callback);

    /** Is this session closed?
     *
     * @return true if the session is closed
     */
    boolean isClosed();

    /** Set the partition key for the next transaction.
     *
     * Normally, this is not needed. Clusterj will automatically set
     * the partition key based on the first operation in the transaction.
     * If the user needs explicit control over the partition key,
     * this is the way to do it.
     * 
     * The instance must be an object that is capable of being persisted. 
     * The values of the partition key will be taken from the values
     * in the instance.
     * 
     * @param instance the object with all partition key properties set
     * @return an Error object or null if no error
     */
    Error setPartitionKey(Object instance);

    /** Set the partition key for the next transaction.
     *
     * Normally, this is not needed. Clusterj will automatically set
     * the partition key based on the first operation in the transaction.
     * If the user needs explicit control over the partition key,
     * this is the way to do it.
     * 
     * The mapping is an object obtained from a class after the
     * class has been annotated. 
     * The parameter "keys" may be of any type. Keys must uniquely identify
     * a single row in the database. If keys is a simple type
     * (number or string), then the parameter type must be the 
     * same type as or compatible with the primary key type of the mapped object.
     * Otherwise, properties are taken
     * from the parameter and matched against property names in the
     * mapping. Primary key properties will be used if all are present,
     * and other properties will be ignored. If keys cannot identify the 
     * primary key, property names corresponding to unique key columns
     * will be used. If no complete primary or unique key properties
     * are found, an error is reported.
     * The returned object will be loaded based on the mapping and the current
     * values in the database.
     * 
     * @return an Error object or null if no error
     */
    Error setPartitionKey(TableMapping mapping, Object keys);

    /** Set the lock mode for read operations. This will take effect immediately
     * and will remain in effect until this session is closed or this method
     * is called again.
     * @param lockmode the LockMode:
     * 'EXCLUSIVE'
     * 'SHARED'
     * 'NONE'
     */
    void setLockMode(String lockmode);

  
    /** listTables(database, callback) 
     *  ASYNC
     *  
     *  list tables in database
     */
    listTables(databaseName, callback);
    
    
    /** getTableMetadata(databaseName, tableName, callback) 
     *  ASYNC
     *
     *  Fetch metadata for table 
     */
    getTableMetadata(databaseName, tableName, callback);
}
