/*****************************************************************************

Copyright (c) 1994, 2013, Oracle and/or its affiliates. All Rights Reserved.

This program is free software; you can redistribute it and/or modify it under
the terms of the GNU General Public License as published by the Free Software
Foundation; version 2 of the License.

This program is distributed in the hope that it will be useful, but WITHOUT
ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with
this program; if not, write to the Free Software Foundation, Inc.,
51 Franklin Street, Suite 500, Boston, MA 02110-1335 USA

*****************************************************************************/

/*******************************************************************//**
@file include/rem0cmp.ic
Comparison services for records

Created 7/1/1994 Heikki Tuuri
************************************************************************/

#include "mysql_com.h"

/*************************************************************//**
This function is used to compare two dfields where at least the first
has its data type field set.
@return 1, 0, -1, if dfield1 is greater, equal, less than dfield2,
respectively */
UNIV_INLINE
int
cmp_dfield_dfield(
/*==============*/
	const dfield_t*	dfield1,/*!< in: data field; must have type field set */
	const dfield_t*	dfield2)/*!< in: data field */
{
	const dtype_t*	type;

	ut_ad(dfield_check_typed(dfield1));

	type = dfield_get_type(dfield1);

	return(cmp_data_data(type->mtype, type->prtype,
			     (const byte*) dfield_get_data(dfield1),
			     dfield_get_len(dfield1),
			     (const byte*) dfield_get_data(dfield2),
			     dfield_get_len(dfield2)));
}

/*************************************************************//**
This function is used to compare two physical records. Only the common
first fields are compared.
@return 1, 0 , -1 if rec1 is greater, equal, less, respectively, than
rec2; only the common first fields are compared */
UNIV_INLINE
int
cmp_rec_rec(
/*========*/
	const rec_t*	rec1,	/*!< in: physical record */
	const rec_t*	rec2,	/*!< in: physical record */
	const ulint*	offsets1,/*!< in: rec_get_offsets(rec1, index) */
	const ulint*	offsets2,/*!< in: rec_get_offsets(rec2, index) */
	dict_index_t*	index)	/*!< in: data dictionary index */
{
	ulint	match_f		= 0;
	ulint	match_b		= 0;

	return(cmp_rec_rec_with_match(rec1, rec2, offsets1, offsets2, index,
				      FALSE, &match_f, &match_b));
}

/*****************************************************************
This function is used to compare two dfields where at least the first
has its data type field set. */
UNIV_INLINE
int
cmp_dfield_dfield_like_prefix(
/*==========================*/
				/* out: 1, 0, -1, if dfield1 is greater, equal,
				less than dfield2, respectively */
	const dfield_t*	dfield1,/* in: data field; must have type field set */
	const dfield_t*	dfield2)/* in: data field */
{
	const dtype_t*  type;

	ut_ad(dfield_check_typed(dfield1));
	ut_ad(dfield_check_typed(dfield2));

	type = dfield_get_type(dfield1);

#ifdef UNIV_DEBUG
	switch (type->prtype & DATA_MYSQL_TYPE_MASK) {
	case MYSQL_TYPE_BIT:
	case MYSQL_TYPE_STRING:
	case MYSQL_TYPE_VAR_STRING:
	case MYSQL_TYPE_TINY_BLOB:
	case MYSQL_TYPE_MEDIUM_BLOB:
	case MYSQL_TYPE_BLOB:
	case MYSQL_TYPE_LONG_BLOB:
	case MYSQL_TYPE_VARCHAR:
		break;
	default:
		ut_error;
	}
#endif /* UNIV_DEBUG */

	uint cs_num = dtype_get_charset_coll(type->prtype);

	if (CHARSET_INFO* cs = get_charset(cs_num, MYF(MY_WME))) {
		return(cs->coll->strnncoll(
			       cs,
			       static_cast<uchar*>(
				       dfield_get_data(dfield1)),
			       dfield_get_len(dfield1),
			       static_cast<uchar*>(
				       dfield_get_data(dfield2)),
			       dfield_get_len(dfield2),
			       1));
	}

	ib_logf(IB_LOG_LEVEL_FATAL,
		"Unable to find charset-collation %u", cs_num);
	return(0);
}
