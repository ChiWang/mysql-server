#
# WL#6965: Truncate UNDO logs.
#

--source include/have_innodb.inc
# this is must to ensure that trx_purge_truncate is called with increased
# frequency so that undo logs are cleared.
--source include/have_debug.inc
# We are printing size of undo log below and if page size keeps on
# varying then initial size too keeps on varying.
--source include/have_innodb_16k.inc
--source include/have_undo_tablespaces.inc

# TC check if truncate is completed in given time frame. When
# test is run under valgrind there is no such time assurance. 
--source include/not_valgrind.inc

################################################################################
# Test-case will test following scenarios.
#
# 1. Perform DML action using multiple clients and multiple undo tablespace.
#
################################################################################

#-----------------------------------------------------------------------------
#
# create test-bed
#
let MYSQL_DATA_DIR_ENV = `select @@datadir`;
let $MYSQL_DATA_DIR = `select @@datadir`;
let SEARCH_FILE = $MYSQLTEST_VARDIR/log/mysqld.1.err;

#-----------------------------------------------------------------------------
#
# 1. Perform DML action using multiple clients and multiple undo tablespace.
#
#
use test;
create table t1
        (keyc int, c1 char(100), c2 char(100),
         primary key(keyc)) engine = innodb;
create table t2
        (keyc int, c1 char(100), c2 char(100),
         primary key(keyc)) engine = innodb;
#
delimiter |;
CREATE PROCEDURE populate_t1()
BEGIN
        DECLARE i INT DEFAULT 1;
        while (i <= 40000) DO
                insert into t1 values (i, 'a', 'b');
                SET i = i + 1;
        END WHILE;
END |
delimiter ;|
#
delimiter |;
CREATE PROCEDURE populate_t2()
BEGIN
        DECLARE i INT DEFAULT 1;
        while (i <= 40000) DO
                insert into t2 values (i, 'a', 'b');
                SET i = i + 1;
        END WHILE;
END |
delimiter ;|
#
#
connect (con1,localhost,root,,);
connect (con2,localhost,root,,);
#
#
connection con1;
begin;
call populate_t1();
delete from t1 where keyc < 20000;
update t1 set c1 = 'mysql' where  keyc > 20000;
update t1 set c2 = 'oracle' where  keyc > 20000;
#
connection con2;
begin;
call populate_t2();
delete from t2 where keyc < 20000;
update t2 set c1 = 'mysql' where  keyc > 20000;
update t2 set c2 = 'oracle' where  keyc > 20000;
#
connection con1;
commit;
connection con2;
commit;
#
connection default;
drop table t1, t2;
drop PROCEDURE populate_t1;
drop PROCEDURE populate_t2;
#
--sleep 15
let SEARCH_PATTERN = Truncating UNDO tablespace;
--source include/search_pattern.inc

#-----------------------------------------------------------------------------
#
# remove test-bed
#

