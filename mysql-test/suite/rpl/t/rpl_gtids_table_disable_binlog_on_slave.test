#
# ==== Purpose ====
#
# WL#6559 Optimize GTIDs for passive slave - store GTIDs in table
#
# Verify that we can store gtids into gtid_executed table for XA transactions
# and report GLOBAL.GTID_EXECUTED and GLOBAL.GTID_PURGED correctly on
# master and slave when binlog is disabled on slave.
#

--source include/master-slave.inc
--source include/have_gtid.inc
--source include/have_debug.inc
--source include/have_debug_sync.inc

SET @debug_save= @@GLOBAL.DEBUG;
--let $master_uuid= `SELECT @@GLOBAL.SERVER_UUID`
SHOW CREATE TABLE mysql.gtid_executed;

--echo # Verify that these gtids are stored into gtid table and can be
--echo # reported from global.gtid_executed for normal DDLs.
CREATE TABLE IF NOT EXISTS t1 (a INT) ENGINE=InnoDB;
CREATE TABLE t2 (a INT) ENGINE=MyISAM;
--echo # Stored gtids MASTER_UUID:1-4 in gtid_executed table on master
--replace_result $master_uuid MASTER_UUID
SELECT * FROM mysql.gtid_executed;
--let $assert_text= committed gtids MASTER_UUID:1-2
--let $assert_cond= "[SELECT @@GLOBAL.GTID_EXECUTED]" = "$master_uuid:1-2"
--source include/assert.inc

--echo # Verify that XA transactions' gtids are stored into gtid table and
--echo # can be reported from global.gtid_executed correctly.
INSERT INTO t2 VALUES(1);
XA START '1';
INSERT INTO t2 VALUES(2);
INSERT INTO t1 VALUES(1);
INSERT INTO t1 VALUES(2);
XA END '1';
XA PREPARE '1';
XA COMMIT '1';
--echo # Stored gtids MASTER_UUID:1-5 in gtid_executed table on master
--replace_result $master_uuid MASTER_UUID
SELECT * FROM mysql.gtid_executed;
--let $assert_text= committed gtids MASTER_UUID:1-5
--let $assert_cond= "[SELECT @@GLOBAL.GTID_EXECUTED]" = "$master_uuid:1-5"
--source include/assert.inc
--echo # Verify that specified gtid is stored into gtid table for XA transaction
--echo # and can be reported from global.gtid_executed correctly.
--replace_result $master_uuid MASTER_UUID
--eval SET @@SESSION.GTID_NEXT= '$master_uuid:16'
SET @@GLOBAL.DEBUG= '+d,compress_gtid_table';
XA START '1';
INSERT INTO t1 VALUES(3);
XA END '1';
XA PREPARE '1';
XA COMMIT '1';
--eval SET GTID_NEXT='AUTOMATIC'
SET DEBUG_SYNC='now WAIT_FOR complete_compression';
--echo # Stored gtids MASTER_UUID:1-5:16 in gtid_executed table on master
--replace_result $master_uuid MASTER_UUID
SELECT * FROM mysql.gtid_executed;
--let $assert_text= committed gtids MASTER_UUID:1-5:16
--let $assert_cond= "[SELECT @@GLOBAL.GTID_EXECUTED]" = "$master_uuid:1-5:16"
--source include/assert.inc

--echo # Verify that transaction's gtid is not stored into gtid table
--echo # and the transaction is rolled back if we encounter an error
--echo # when writing gtid into table.
SET @@GLOBAL.DEBUG="+d,simulate_err_on_write_gtid_into_table";
XA START '1';
INSERT INTO t1 VALUES(4);
--ERROR ER_GET_ERRNO
XA END '1';
XA ROLLBACK '1';
SET GLOBAL DEBUG= @debug_save;
--echo # Stored gtids MASTER_UUID:1-5:16 in gtid_executed table on master
--replace_result $master_uuid MASTER_UUID
SELECT * FROM mysql.gtid_executed;
--let $assert_text= Table t1 must not contain 4
--let $assert_cond= "[SELECT a FROM t1 WHERE a=4]" = ""
--source include/assert.inc

--source include/sync_slave_sql_with_master.inc
--echo connection slave
--let $slave_uuid= `SELECT @@GLOBAL.SERVER_UUID`
call mtr.add_suppression("You need to use --log-bin to make --binlog-format work");
call mtr.add_suppression("Slave SQL: Error in Xid_log_event: Commit could not "
                         "be completed, 'Got error -1 from storage engine', "
                         "Error_code: 1030");
call mtr.add_suppression("Slave: Got error -1 from storage engine Error_code: 1030");

--echo # Verify that the transaction is skiped if its specified gtid
--echo # is already in gtid table.
--replace_result $master_uuid MASTER_UUID
--eval SET @@SESSION.GTID_NEXT= '$master_uuid:4'
INSERT INTO t1 VALUES(11);
--let $assert_text= Table t1 must not contain 11
--let $assert_cond= "[SELECT a FROM t1 WHERE a=11]" = ""
--source include/assert.inc

--echo # Verify that the specified gtid to GTID_NEXT is stored into
--echo # gtid table.
--replace_result $master_uuid MASTER_UUID
--eval SET @@SESSION.GTID_NEXT= '$master_uuid:17'
COMMIT;
--echo # Stored gtids MASTER_UUID:1-5:16-17 in gtid_executed table on slave
--replace_result $master_uuid MASTER_UUID
SELECT * FROM mysql.gtid_executed;
--let $assert_text= committed gtids MASTER_UUID:1-5:16-17
--let $assert_cond= "[SELECT @@GLOBAL.GTID_EXECUTED]" = "$master_uuid:1-5:16-17"
--source include/assert.inc

--echo # Verify that gtid_executed and gtid_purged are always same
--echo # when binlog is disabled.
--let $assert_text= gtid_executed and gtid_purged are always same when binlog is disabled
--let $assert_cond= "[SELECT @@GLOBAL.GTID_EXECUTED]" = "[SELECT @@GLOBAL.GTID_PURGED]"
--source include/assert.inc

--eval SET GTID_NEXT='AUTOMATIC'
--echo # Verify that no gtid is generated for transaction
--echo # when binlog is disabled
CREATE TABLE t3 (a INT);
INSERT INTO t1 VALUES(12);
DROP TABLE t3;
--echo # Stored gtids MASTER_UUID:1-5:16-17 in gtid_executed table on slave.
--replace_result $master_uuid MASTER_UUID
--eval SELECT * FROM mysql.gtid_executed

--connection master
DROP TABLE t1, t2;
--source include/sync_slave_sql_with_master.inc

SET @debug_save= @@GLOBAL.DEBUG;
--connection master
CREATE TABLE t3 (a INT);
--source include/sync_slave_sql_with_master.inc
--echo # Verify that transaction's gtid is not stored into gtid table
--echo # and the transaction is rolled back if we encounter an error
--echo # when writing gtid into table when binlog is disabled and
--echo # gtid_mode is enabled.
SET @@GLOBAL.DEBUG= '+d,simulate_err_on_write_gtid_into_table';
--connection master
INSERT INTO t3 VALUES(1);
--connection slave
--let $slave_sql_errno=convert_error(ER_GET_ERRNO)
--source include/wait_for_slave_sql_error.inc
SET GLOBAL DEBUG= @debug_save;
--source include/stop_slave_io.inc
--echo # Stored gtids MASTER_UUID:1-7:16-17 in gtid_executed table on slave.
--replace_result $master_uuid MASTER_UUID
--eval SELECT * FROM mysql.gtid_executed
--let $assert_text= committed gtids MASTER_UUID:1-7:16-17
--let $assert_cond= "[SELECT @@GLOBAL.GTID_EXECUTED]" = "$master_uuid:1-7:16-17"
--source include/assert.inc
--let $assert_text= Table t3 must not contain 1
--let $assert_cond= "[SELECT a FROM t3 WHERE a=1]" = ""
--source include/assert.inc

--connection master
DROP TABLE t3;
--connection slave
--source include/start_slave.inc

--source include/rpl_end.inc
