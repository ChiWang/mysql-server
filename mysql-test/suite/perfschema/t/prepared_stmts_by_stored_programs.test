# Test to check instrumentation of prepared statements created by 
# stored programs. SQL prepared statements (PREPARE, EXECUTE, DEALLOCATE PREPARE) 
# can be used in stored procedures, but not stored functions or triggers.

--source include/not_embedded.inc
--source include/have_perfschema.inc
--source suite/perfschema/include/no_protocol.inc

--let $psi_select = SELECT STATEMENT_NAME, SQL_TEXT, COUNT_EXECUTE, OWNER_OBJECT_TYPE, OWNER_OBJECT_SCHEMA, OWNER_OBJECT_NAME FROM performance_schema.prepared_statements_instances

TRUNCATE TABLE performance_schema.prepared_statements_instances; 

CREATE DATABASE db;
USE db;

CREATE TABLE t
(
  a INT,
  b CHAR(10)
);

INSERT INTO t VALUES (1,"kuchipudi");
INSERT INTO t VALUES (2,"odissi");
INSERT INTO t VALUES (3,"kathak");
INSERT INTO t VALUES (4,"mohiyattam");
INSERT INTO t VALUES (5,"manipuri");
INSERT INTO t VALUES (6,"kathakali");

# Stored Procedure
DELIMITER |;
CREATE PROCEDURE p1()
BEGIN
  PREPARE st FROM 'SELECT * FROM t WHERE a<=?' ;
  SET @a=3;
  EXECUTE st using @a;
END|

CALL p1()|
--eval $psi_select

DEALLOCATE PREPARE st|
--eval $psi_select

CREATE PROCEDURE p2()
BEGIN
  PREPARE st1 FROM 'INSERT INTO t SELECT * FROM t WHERE a<=?' ;
END|

CALL p2()|
--eval $psi_select

SET @a=4|
EXECUTE st1 using @a|
--eval $psi_select

CREATE PROCEDURE p3()
BEGIN
  SET @a=2; 
  EXECUTE st1 using @a;
END|

CALL p3()|
--eval $psi_select

DEALLOCATE PREPARE st1|
--eval $psi_select

PREPARE st2 FROM 'UPDATE t SET a=a+1 WHERE b=?'|
--eval $psi_select

CREATE PROCEDURE p4()
BEGIN
  SET @b='kuchipudi';
  EXECUTE st2 USING @b;
END|

CALL p4()|
--eval $psi_select

DEALLOCATE PREPARE st2|
--eval $psi_select

CREATE PROCEDURE p5()
BEGIN
  SET @a=1;
  SELECT @a;
END|

PREPARE st3 FROM 'CALL p5()'|
--eval $psi_select
EXECUTE st3|
--eval $psi_select
DEALLOCATE PREPARE st3|
--eval $psi_select

DELIMITER ;| 

# Events

SET GLOBAL event_scheduler=ON;

DELIMITER |;

CREATE EVENT e1 ON SCHEDULE EVERY 1 SECOND DO
BEGIN
  PREPARE st FROM 'SELECT POW(?,?)';  
  SET @b=5;
  SET @a=10;
  EXECUTE st USING @a, @b;
END|

DELIMITER ;|

# Wait till the  above one execution of event is instrumented.

--let $wait_condition= select count(*) = 1 from performance_schema.prepared_statements_instances where OWNER_OBJECT_TYPE='EVENT'
--source include/wait_condition.inc

--eval $psi_select

SET GLOBAL event_scheduler=OFF;
--source include/no_running_event_scheduler.inc

# clean-up
TRUNCATE TABLE performance_schema.prepared_statements_instances;
TRUNCATE TABLE performance_schema.events_statements_history_long;

DROP TABLE t;
DROP PROCEDURE p1;
DROP PROCEDURE p2;
DROP PROCEDURE p3;
DROP PROCEDURE p4;
DROP PROCEDURE p5;
DROP EVENT IF EXISTS e1;
DROP DATABASE db;
