set global innodb_file_per_table=on;
# Verify that 'TRUNCATE TABLE' statement works fine and the size
# of .ibd file is equal to the initial size after truncation.
drop table if exists t1;
create table t1(a int not null,
b int not null,
primary key (a),
index (b))
engine=innodb;
select count(*) from t1;
count(*)
20000
truncate table t1;
# Verify that 'TRUNCATE TABLE' statement works fine, which can empty a table.
select count(*) from t1;
count(*)
0
# Check the size of .ibd file after truncation.
The size of t1.ibd file is 114688 bytes.
# Verify that the insertion to the table works fine after truncation.
select count(*) from t1;
count(*)
25000
drop table t1;
# Verify that recovery works fine from a crash during
# the drop of the second secondary to a table with
# remote data directory and dynamic format.
drop table if exists t1;
set global innodb_file_format='Barracuda';
#
# Create and insert records into a table
# that uses a remote DATA DIRECTORY.
#
create table t1(a int not null,
b int not null,
c int not null,
primary key (a),
index (b),
index (c))
row_format=dynamic engine=innodb data directory='mysql_tmp_dir/alt_dir';
select count(*) from t1;
count(*)
17000
# Write file to make mysql-test-run.pl expect crash and restart
# Run the crashing query
truncate table t1;
ERROR HY000: Lost connection to MySQL server during query
# Restart the MySQL server
select count(*) from t1;
count(*)
0
select count(*) from t1;
count(*)
20000
# Verify that 'TRUNCATE TABLE' statement can empty a table normally.
truncate table t1;
select count(*) from t1;
count(*)
0
# Verify that we can insert data into the truncated table normally.
select count(*) from t1;
count(*)
17000
drop table t1;
# Verify that recovery works fine from a crash during the creation
# of the second secondary to a table with redundant format.
drop table if exists t1;
create table t1(a int not null,
b int not null,
c int not null,
primary key (a),
index (b),
index (c))
engine=innodb row_format=redundant;
select count(*) from t1;
count(*)
17000
# Write file to make mysql-test-run.pl expect crash and restart
# Run the crashing query
truncate table t1;
ERROR HY000: Lost connection to MySQL server during query
# Restart the MySQL server
select count(*) from t1;
count(*)
0
select count(*) from t1;
count(*)
17000
# Verify that 'TRUNCATE TABLE' statement can empty a table normally.
truncate table t1;
select count(*) from t1;
count(*)
0
# Verify that we can insert data into the truncated table normally.
select count(*) from t1;
count(*)
17000
drop table t1;
# Verify that recovery works fine from a crash before
# log checkpoint to a table with compact format.
drop table if exists t1;
create table t1(a int not null,
b int not null,
c int not null,
primary key (a),
index (b),
index (c))
engine=innodb row_format=compact;
select count(*) from t1;
count(*)
17000
# Write file to make mysql-test-run.pl expect crash and restart
# Run the crashing query
truncate table t1;
ERROR HY000: Lost connection to MySQL server during query
# Restart the MySQL server
select count(*) from t1;
count(*)
0
select count(*) from t1;
count(*)
17000
# Verify that 'TRUNCATE TABLE' statement can empty a table normally.
truncate table t1;
select count(*) from t1;
count(*)
0
# Verify that we can insert data into the truncated table normally.
select count(*) from t1;
count(*)
17000
drop table t1;
# Verify that recovery works fine from a crash after
# log checkpoint to a table with 8k block size.
drop table if exists t1;
set global innodb_file_format='Barracuda';
call mtr.add_suppression("InnoDB: A page in the doublewrite buffer is not within space bounds");
create table t1(a int not null,
b int not null,
c int not null,
primary key (a),
index (b),
index (c))
engine=innodb row_format=compressed key_block_size=8;
select count(*) from t1;
count(*)
17000
# Write file to make mysql-test-run.pl expect crash and restart
# Run the crashing query
truncate table t1;
ERROR HY000: Lost connection to MySQL server during query
# Restart the MySQL server
select count(*) from t1;
count(*)
0
select count(*) from t1;
count(*)
17000
# Verify that 'TRUNCATE TABLE' statement can empty a table normally.
truncate table t1;
select count(*) from t1;
count(*)
0
# Verify that we can insert data into the truncated table normally.
select count(*) from t1;
count(*)
17000
drop table t1;
# Verify that recovery works fine from a crash after physically
# truncated the tablespace to a table with 4k block size.
drop table if exists t1;
set global innodb_file_format='Barracuda';
call mtr.add_suppression("InnoDB: A page in the doublewrite buffer is not within space bounds");
create table t1(a int not null,
b int not null,
c int not null,
primary key (a),
index (b),
index (c))
engine=innodb row_format=compressed key_block_size=4;
select count(*) from t1;
count(*)
17000
# Write file to make mysql-test-run.pl expect crash and restart
# Run the crashing query
truncate table t1;
ERROR HY000: Lost connection to MySQL server during query
# Restart the MySQL server
select count(*) from t1;
count(*)
0
select count(*) from t1;
count(*)
17000
# Verify that 'TRUNCATE TABLE' statement can empty a table normally.
truncate table t1;
select count(*) from t1;
count(*)
0
# Verify that we can insert data into the truncated table normally.
select count(*) from t1;
count(*)
17000
drop table t1;
# Verify that recovery works fine from a crash after physically
# truncated the tablespace to a table with 2k block size.
drop table if exists t1;
set global innodb_file_format='Barracuda';
call mtr.add_suppression("InnoDB: A page in the doublewrite buffer is not within space bounds");
create table t1(a int not null,
b int not null,
c int not null,
primary key (a),
index (b),
index (c))
engine=innodb row_format=compressed key_block_size=2;
select count(*) from t1;
count(*)
17000
# Write file to make mysql-test-run.pl expect crash and restart
# Run the crashing query
truncate table t1;
ERROR HY000: Lost connection to MySQL server during query
# Restart the MySQL server
select count(*) from t1;
count(*)
0
select count(*) from t1;
count(*)
17000
# Verify that 'TRUNCATE TABLE' statement can empty a table normally.
truncate table t1;
select count(*) from t1;
count(*)
0
# Verify that we can insert data into the truncated table normally.
select count(*) from t1;
count(*)
17000
drop table t1;
# Verify that the TRUNCATE TABLE statement works fine
# if the tablespace is missing.
CREATE DATABASE wl6501;
create table wl6501.t1(a int not null,
b int not null,
c int not null,
primary key (a),
index (b),
index (c))
engine=innodb row_format=compact;
select count(*) from wl6501.t1;
count(*)
100
# Write file to make mysql-test-run.pl expect crash and restart
# Run the crashing query
truncate table wl6501.t1;
ERROR HY000: Lost connection to MySQL server during query
# Restart the MySQL server
select count(*) from wl6501.t1;
count(*)
100
drop table wl6501.t1;
drop database wl6501;
# Verify that the TRUNCATE TABLE statement is rollbacked
# and the table is marked as corrupt when the .ibd file
# is missing.
CREATE DATABASE wl6501;
create table wl6501.t1(a int not null,
b int not null,
c int not null,
primary key (a),
index (b),
index (c))
engine=innodb row_format=compact;
select count(*) from wl6501.t1;
count(*)
100
# Write file to make mysql-test-run.pl expect crash and restart
# Run the crashing query
truncate table wl6501.t1;
ERROR HY000: Got error -1 from storage engine
# Restart the MySQL server
show create table wl6501.t1;
Table	Create Table
t1	CREATE TABLE `t1` (
  `a` int(11) NOT NULL,
  `b` int(11) NOT NULL,
  `c` int(11) NOT NULL,
  PRIMARY KEY (`a`),
  KEY `b` (`b`),
  KEY `c` (`c`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1 ROW_FORMAT=COMPACT
drop table wl6501.t1;
drop database wl6501;
