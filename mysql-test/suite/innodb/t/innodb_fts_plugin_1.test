--source include/have_innodb.inc
--source include/have_simple_parser.inc

#-----------------------------------------------------------------------------
# wl6943 : Support external parser
# Adding FTS check with "simple_praser" (external parser plugin)
# - Table with external parser + default parser
# - FTS index with single and two columns
# - external parser index using alter table
# - check with transactional statement
# - Check utf8 charset table
#-----------------------------------------------------------------------------

# Install fts parser plugin
--replace_regex /\.dll/.so/
eval INSTALL PLUGIN simple_parser SONAME '$SIMPLE_PARSER';


-- echo # Create Index Test(CREATE TABLE WITH FULLTEXT INDEX)
CREATE TABLE articles (
	id INT UNSIGNED AUTO_INCREMENT NOT NULL PRIMARY KEY,
	title VARCHAR(200),
	body TEXT,
	body1 TEXT,
	body2 TEXT,
	body3 TEXT,
	FULLTEXT (title, body) WITH PARSER simple_parser,
	FULLTEXT (title, body1) WITH PARSER simple_parser,
	FULLTEXT (body3)
	) ENGINE=InnoDB;

INSERT INTO articles (title, body,body1,body2,body3) VALUES
  ('MySQL Tutorial','DBMS stands for MySQL DataBase ...','row1col4','row1col5','row1col5'),
  ('How To Use MySQL Well','After you went through a ...','row2col4','row2col5','row2col5'),
  ('Optimizing MySQL','In this tutorial we will show ...','row3col4','row3col5','row3col5 for'),
  ('1001 MySQL Tricks','How to use full-text search engine','row4col4','row4col5','row4col5'),
  ('Go MySQL Tricks','How to use full text search engine','row5col4 this','row5col5','row5col5');

ALTER TABLE articles ADD FULLTEXT INDEX (body1,body2) WITH PARSER simple_parser;
ALTER TABLE articles ADD FULLTEXT INDEX (body2,body3);
ALTER TABLE articles ADD FULLTEXT INDEX (body) WITH PARSER simple_parser;

# Simple term search
SELECT * FROM articles WHERE
	MATCH(title, body) AGAINST('mysql');
SELECT * FROM articles WHERE
	MATCH(title, body) AGAINST('dbms' WITH QUERY EXPANSION);
SELECT * FROM articles WHERE
	MATCH(title, body1) AGAINST('row1col4');
SELECT * FROM articles WHERE
	MATCH(title, body) AGAINST('row5col4' WITH QUERY EXPANSION);
SELECT * FROM articles WHERE
	MATCH(body1, body2) AGAINST('row3col4');
SELECT * FROM articles WHERE
	MATCH(body) AGAINST('well' WITH QUERY EXPANSION);

# Test stopword and word len less than fts_min_token_size
SELECT * FROM articles WHERE
	MATCH(title, body) AGAINST('will go');
#stopword
SELECT * FROM articles WHERE
	MATCH(title, body) AGAINST('this');
SELECT * FROM articles WHERE
	MATCH(title, body) AGAINST('for');
SELECT * FROM articles WHERE
	MATCH(body1, body2) AGAINST('this');
SELECT * FROM articles WHERE
	MATCH(body) AGAINST('this');


-- echo # Test plugin parser tokenizer difference
SELECT * FROM articles WHERE
	MATCH(title, body) AGAINST('full-text');

SELECT * FROM articles WHERE
	MATCH(title, body) AGAINST('full text');

# No result here, we get '"mysql' 'database"' by simple parser
SELECT * FROM articles WHERE
	MATCH(title, body) AGAINST('"mysql database"' IN BOOLEAN MODE);


# Phrase search
SELECT * FROM articles WHERE
	MATCH(title, body) AGAINST('"mysql database"' IN BOOLEAN MODE);


# use transaction
START TRANSACTION;
INSERT INTO articles (title, body,body1,body2,body3) VALUES
  ('latest Tutorial','transactional properties tests ...','row6col4','row6col5','row6col5'),
  ('certification guide','all mysql exams tests ...','row7col4','row7col5','row7col5');
# FTS do not parse those uncommitted rows, only one row should show up
SELECT * FROM articles WHERE
	MATCH(title, body) AGAINST('mysql');
SELECT * FROM articles WHERE
	MATCH(title, body) AGAINST('Tutorial');
SELECT * FROM articles WHERE
	MATCH(title, body) AGAINST('guide');
SELECT * FROM articles WHERE
	MATCH(title, body) AGAINST('tests');

SELECT * FROM articles WHERE
	MATCH(title, body1) AGAINST('row6col4');
SELECT * FROM articles WHERE
	MATCH(body1,body2) AGAINST('row7col5');
# uncommitted records can be seen with non fts queries
SELECT * FROM articles WHERE id > 5;

ROLLBACK;
SELECT * FROM articles WHERE
	MATCH(title, body) AGAINST('mysql');
SELECT * FROM articles WHERE
	MATCH(title, body) AGAINST('Tutorial');
SELECT * FROM articles WHERE
	MATCH(title, body) AGAINST('guide');
SELECT * FROM articles WHERE
	MATCH(title, body) AGAINST('tests');

SELECT * FROM articles WHERE
	MATCH(title, body1) AGAINST('row6col4');
SELECT * FROM articles WHERE
	MATCH(body1,body2) AGAINST('row7col5');

START TRANSACTION;
INSERT INTO articles (title, body,body1,body2,body3) VALUES
  ('latest Tutorial','transactional properties tests ...','row6col4','row6col5','row6col5');
COMMIT;
# FTS only parse committed rows, now rows should show up
SELECT * FROM articles WHERE
	MATCH(title, body) AGAINST('mysql');
SELECT * FROM articles WHERE
	MATCH(title, body) AGAINST('Tutorial');
SELECT * FROM articles WHERE
	MATCH(title, body) AGAINST('guide');
SELECT * FROM articles WHERE
	MATCH(title, body) AGAINST('tests');
SELECT * FROM articles WHERE
	MATCH(body) AGAINST('tests');

SELECT * FROM articles WHERE
	MATCH(title, body1) AGAINST('row6col4');
SELECT * FROM articles WHERE
	MATCH(body1,body2) AGAINST('row7col5');

DROP TABLE articles;
# Get warning here


#set names utf8;
SET NAMES UTF8;


--disable_warnings
DROP TABLE IF EXISTS t1;
--enable_warnings

# Create FTS table
EVAL CREATE TABLE t1 (
        id INT UNSIGNED AUTO_INCREMENT NOT NULL PRIMARY KEY,
        a VARCHAR(200),
        b TEXT,
        FULLTEXT (b) WITH PARSER simple_parser
        ) CHARACTER SET = UTF8,ENGINE = InnoDB;


# Insert rows
INSERT INTO t1 (a,b) VALUES
        ('MySQL from Tutorial','DBMS stands for DataBase ...')  ,
        ('when To Use MySQL Well','After that you went through a ...'),
        ('where will Optimizing MySQL','what In this tutorial we will show ...'),
        ('Я могу есть стекло', 'оно мне Mне вредит'),
        ('Μπορῶ νὰ φάω σπασμένα' ,'γυαλιὰ χωρὶς νὰ πάθω τίποτα'),
        ('Sævör grét', 'áðan því úlpan var ónýt');

CREATE FULLTEXT INDEX idx on t1 (a,b) WITH PARSER simple_parser;
INSERT INTO t1 (a,b) VALUES
        ('adding record using session 1','for verifying multiple concurrent transactions'),
        ('Мога да ям стъкло', 'то Mне ми вреди');

# no record expected - records not seen in boolean for simple_parser
SELECT * FROM t1 WHERE MATCH (a,b) AGAINST ('+Mне' IN BOOLEAN MODE);
# 2 record expected
SELECT * FROM t1 WHERE MATCH (a,b) AGAINST ('Mне');
# 1 record expected
SELECT * FROM t1 WHERE MATCH (a,b) AGAINST ('могу');
SELECT * FROM t1 WHERE MATCH (b) AGAINST ('áðan');
# 3 record expected
SELECT * FROM t1 WHERE MATCH (b) AGAINST ('áðan') OR MATCH (a,b) AGAINST ('Mне могу');
# 1 record expected
SELECT * FROM t1 WHERE MATCH (a,b) AGAINST ('стъкло');
# 1 record expected
SELECT * FROM t1 WHERE MATCH (a,b) AGAINST ('"dbms stands"@05' IN BOOLEAN MODE);
# no records for stopword
SELECT * FROM t1 WHERE MATCH (a,b) AGAINST ('for');

DROP TABLE t1;
UNINSTALL PLUGIN simple_parser;
