#Bug#13955083 ALLOW IN-PLACE DDL OPERATIONS ON MISSING OR DISCARDED TABLESPACES

--source include/not_embedded.inc
--source include/have_innodb.inc

let $MYSQLD_DATADIR=`select @@datadir`;
SET GLOBAL innodb_file_per_table=1;
CREATE TABLE t(a INT)ENGINE=InnoDB;

# Shut down the server
-- exec echo "wait" > $MYSQLTEST_VARDIR/tmp/mysqld.1.expect
-- shutdown_server
-- source include/wait_until_disconnected.inc

# Remove the tablespace file.
let IBD=$MYSQLD_DATADIR/test/t.ibd;
perl;
unlink "$ENV{IBD}" || die "Unable to unlink $ENV{IBD}\n";
EOF

# Restart the server.
-- exec echo "restart" > $MYSQLTEST_VARDIR/tmp/mysqld.1.expect
-- enable_reconnect
-- source include/wait_until_connected_again.inc

--disable_query_log
call mtr.add_suppression("\\[Warning\\] InnoDB: cannot calculate statistics for table \"test\"\.\"t\" because the \.ibd file is missing");
call mtr.add_suppression("\\[ERROR\\] InnoDB: Operating system error number 2 in a file operation.");
call mtr.add_suppression("\\[ERROR\\] InnoDB: The error means the system cannot find the path specified.");
call mtr.add_suppression("\\[ERROR\\] InnoDB: If you are installing InnoDB, remember that you must create directories yourself, InnoDB does not create them.");
call mtr.add_suppression("\\[ERROR\\] InnoDB: Cannot open datafile for read-only:");
call mtr.add_suppression("InnoDB: Table 'test/t'$");
call mtr.add_suppression("Could not find a valid tablespace file for");
call mtr.add_suppression("InnoDB: Tablespace open failed for \"test\"\.\"t\", ignored");
call mtr.add_suppression("InnoDB: Failed to find tablespace for table \"test\"\.\"t\" in the cache");
call mtr.add_suppression("InnoDB: Cannot delete tablespace [0-9]+.*not found");
call mtr.add_suppression("Table .*t in the InnoDB data dictionary has tablespace id .*, but tablespace with that id or name does not exist");
--enable_query_log

# The ER_NO_SUCH_TABLE is being thrown by ha_innobase::open().
# The table does exist, only the tablespace does not exist.
--error ER_NO_SUCH_TABLE
SELECT * FROM t;

--error ER_NO_SUCH_TABLE
ALTER TABLE t ADD INDEX (a), ALGORITHM=INPLACE;
--error ER_NO_SUCH_TABLE
ALTER TABLE t1 ADD INDEX (a), ALGORITHM=COPY;

ALTER TABLE t DISCARD TABLESPACE;
DROP TABLE t;

--echo #
--echo # Bug #18734396  INNODB IN-PLACE ALTER FAILURES BLOCK FUTURE ALTERS
--echo #

let datadir= `select @@datadir`;

--let $_server_id= `SELECT @@server_id`
--let $_expect_file_name=$MYSQLTEST_VARDIR/tmp/mysqld.$_server_id.expect

--echo # Crash the server in ha_innobase::commit_inplace_alter_table()
CREATE TABLE t1 (f1 INT NOT NULL, f2 INT NOT NULL) ENGINE=innodb;
SET debug='d,innodb_alter_commit_crash_before_commit';

let $orig_table_id = `SELECT table_id
        FROM information_schema.innodb_sys_tables
        WHERE name = 'test/t1'`;

--echo # Write file to make mysql-test-run.pl expect crash
--exec echo "restart" > $MYSQLTEST_VARDIR/tmp/mysqld.1.expect

--echo # Execute the statement that causes the crash
--error 2013
ALTER TABLE t1 ADD PRIMARY KEY (f2, f1);
# Turn on reconnect
--enable_reconnect

--echo # Call script that will poll the server waiting for it to
--echo # be back online again
--source include/wait_until_connected_again.inc

let temp_table_name = `SELECT SUBSTR(name, 6)
	FROM information_schema.innodb_sys_tables
	WHERE name LIKE "test/#sql-ib$orig_table_id%"`;

show create table t1;
--echo # Consecutive alter table does not create same temporary file name
ALTER TABLE t1 ADD PRIMARY KEY (f2, f1);

--disable_reconnect

# Write file to make mysql-test-run.pl wait for the server to stop
-- exec echo "wait" > $MYSQLTEST_VARDIR/tmp/mysqld.1.expect

# Send a shutdown request to the server
-- shutdown_server 10

# Call script that will poll the server waiting for it to disapear
-- source include/wait_until_disconnected.inc

--echo # Manual recovery begin. The dictionary was not updated
--echo # and the files were not renamed. The rebuilt table
--echo # was left behind on purpose, to faciliate data recovery.

perl;
my @frm_file = glob "$ENV{'datadir'}/test/#sql-*.frm";
my $target_frm = "$ENV{'datadir'}/test/$ENV{'temp_table_name'}.frm";
rename($frm_file[0], $target_frm);
EOF

--echo # Manual recovery end

--echo # Write file to make mysql-test-run.pl start the server
--exec echo "restart" > $MYSQLTEST_VARDIR/tmp/mysqld.1.expect

# Turn on reconnect
--enable_reconnect

--echo # Call script that will poll the server waiting for it to
--echo # be back online again
--source include/wait_until_connected_again.inc

--disable_reconnect

show tables;
show create table t1;
drop table t1;

--disable_query_log
# Drop the orphaned rebuilt table.
eval drop table `#mysql50#$temp_table_name`;
--enable_query_log
