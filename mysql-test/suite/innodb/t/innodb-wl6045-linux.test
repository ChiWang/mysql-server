#************************************************************
# WL6045:Improve Innochecksum
# Test Case [1] Check the innochecksum tool when read from stdin and without any rewrite of checksum.
# Test Case [2] Check the innochecksum tool when read from stdin and rewrite to "crc32" checksum.
# Test Case [3] Check the innochecksum tool when read from stdin and rewrite to "none" checksum.
# Test Case [4] Check the innochecksum tool when read from stdin and rewrite to "innodb" checksum.
# Test Case [5] Check the innochecksum tool when read from stdin for page-type-summary
#************************************************************

--source include/not_windows.inc
--source include/have_innodb.inc
call mtr.add_suppression("InnoDB: Unable to lock");

let MYSQLD_BASEDIR= `SELECT @@basedir`;
let MYSQLD_DATADIR= `SELECT @@datadir`;
let SEARCH_FILE= $MYSQLTEST_VARDIR/log/my_restart.err;

--disable_warnings
DROP TABLE IF EXISTS t1;

SET GLOBAL innodb_file_per_table=on;
SET GLOBAL innodb_file_format='barracuda';

SHOW variables like '%innodb_checksum_algorithm%';
CREATE TABLE t1(c1 INT PRIMARY KEY,c2 VARCHAR(20)) ENGINE=InnoDB;
INSERT INTO t1 VALUES(1, 'Innochecksum InnoDB');
INSERT INTO t1 VALUES(2, 'Innochecksum CRC32');

--echo # Shutdown the Server
--exec echo "wait" > $MYSQLTEST_VARDIR/tmp/mysqld.1.expect
--shutdown_server
--source include/wait_until_disconnected.inc

# Test cases for read from standard input for innochecksum tool
--echo # Test[1] for read from standard input for innochecksum tool without rewrite of checksum with debug option.
perl;
use strict;
use warnings;
my $innochecksum = $ENV{'INNOCHECKSUM'};
my $mysqltest_vardir= $ENV{'MYSQLTEST_VARDIR'};
my $mysqld_datadir= $ENV{'MYSQLD_DATADIR'};
exec("cat $mysqld_datadir/test/t1.ibd | $innochecksum --debug='d:o,$mysqltest_vardir/tmp/mtrchecksum.trace' -");
EOF

perl;
use strict;
use warnings;
use File::Copy;
my $dir = $ENV{'MYSQL_TMP_DIR'};
opendir(DIR, $dir) or die $!;
my $file= 'mtrchecksum.trace';
# open file in write mode
open IN_FILE,"<", "$dir/$file" or die $!;
open OUT_FILE, ">", "$dir/tmp" or die $!;
while(<IN_FILE>) {
 #Replace all intergers to #
 $_=~ s/\d+/#/g;
 $_=~ s/crc#/crc32/g;
 $_=~ s/Filename =.+/Filename = -/g;
 $_=~ s/file .+ =/file - =/g;
 print OUT_FILE $_;
}
close(IN_FILE);
close(OUT_FILE);
#move the new content from tmp file to the orginal file.
move ("$dir/tmp", "$dir/$file");
closedir(DIR);
EOF

# Print the information for debug option.
cat_file $MYSQLTEST_VARDIR/tmp/mtrchecksum.trace;

--echo # Test[1] End
--echo # Test [2] for read from standard input for innochecksum tool with rewrite of crc32 checksum.
let t1_IBD = $MYSQLD_DATADIR/test/t1.ibd;
--echo # Backup the t1.ibd before any rewrite of checksum, so used for further testing.
--copy_file $t1_IBD $MYSQLD_DATADIR/test/t1.ibd.backup

perl;
use strict;
use warnings;
my $innochecksum = $ENV{'INNOCHECKSUM'};
my $mysqltest_vardir= $ENV{'MYSQLTEST_VARDIR'};
my $mysqld_datadir= $ENV{'MYSQLD_DATADIR'};
exec("cat $mysqld_datadir/test/t1.ibd | $innochecksum --debug='d:o,$mysqltest_vardir/tmp/mtrchecksum.trace' --write=crc32 - > $mysqltest_vardir/tmp/a.ibd");
EOF

perl;
use strict;
use warnings;
use File::Copy;
my $dir = $ENV{'MYSQL_TMP_DIR'};
opendir(DIR, $dir) or die $!;
my $file= 'mtrchecksum.trace';
# open file in write mode
open IN_FILE,"<", "$dir/$file" or die $!;
open OUT_FILE, ">", "$dir/tmp" or die $!;
while(<IN_FILE>) {
 #Replace all intergers to #
 $_=~ s/\d+/#/g;
 $_=~ s/crc#/crc32/g;
 $_=~ s/Filename =.+/Filename = -/g;
 $_=~ s/file .+ =/file - =/g;
 print OUT_FILE $_;
}
close(IN_FILE);
close(OUT_FILE);
#move the new content from tmp file to the orginal file.
move ("$dir/tmp", "$dir/$file");
closedir(DIR);
EOF
--echo # Print the information for debug option.
cat_file $MYSQLTEST_VARDIR/tmp/mtrchecksum.trace;

--echo # Recheck the a.ibd created file having crc32 checksum with the --strict-check=crc32 for innochecksum tool.
--exec $INNOCHECKSUM --debug="d:o,$MYSQLTEST_VARDIR/tmp/mtrchecksum.trace" --strict-check=crc32 $MYSQLTEST_VARDIR/tmp/a.ibd

perl;
use strict;
use warnings;
use File::Copy;
my $dir = $ENV{'MYSQL_TMP_DIR'};
opendir(DIR, $dir) or die $!;
my $file= 'mtrchecksum.trace';
# open file in write mode
open IN_FILE,"<", "$dir/$file" or die $!;
open OUT_FILE, ">", "$dir/tmp" or die $!;
while(<IN_FILE>) {
 #Replace all intergers to #
 $_=~ s/\d+/#/g;
 $_=~ s/crc#/crc32/g;
 $_=~ s/Filename =.+/Filename = a.ibd/g;
 $_=~ s/file .+ =/file t1.ibd =/g;
 print OUT_FILE $_;
}
close(IN_FILE);
close(OUT_FILE);
#move the new content from tmp file to the orginal file.
move ("$dir/tmp", "$dir/$file");
closedir(DIR);
EOF

# Print the information for debug option.
cat_file $MYSQLTEST_VARDIR/tmp/mtrchecksum.trace;

--echo #Replace the t.ibd with the newly created a.ibd having crc32 checksum.
--remove_file $MYSQLD_DATADIR/test/t1.ibd
--copy_file $MYSQLTEST_VARDIR/tmp/a.ibd $MYSQLD_DATADIR/test/t1.ibd
--remove_file $MYSQLTEST_VARDIR/tmp/a.ibd

--echo # Start the server to validate the t1.ibd having crc32 checksum.
--exec echo "restart" > $MYSQLTEST_VARDIR/tmp/mysqld.1.expect
--echo # Server Started normally
--enable_reconnect
--source include/wait_until_connected_again.inc
--disable_reconnect

--echo # Shutdown the server
--exec echo "wait:" >$MYSQLTEST_VARDIR/tmp/mysqld.1.expect
--shutdown_server
--source include/wait_until_disconnected.inc

--echo # Test[2] End
--echo # Test[3] for read from standard input for innochecksum tool with rewrite of "none" checksum.

--echo # Retrieve the original t1.ibd before any rewrite of checksum, so used for further testing.
--remove_file $t1_IBD
--copy_file $MYSQLD_DATADIR/test/t1.ibd.backup $t1_IBD

--echo # Command for innochecksum too to read from stdin and rewrite the checksum to "none"
--echo # cat MYSQLD_DATADIR/test/t1.ibd | innochecksum --debug='d:o,MYSQLTEST_VARDIR/tmp/mtrchecksum.trace' --write=none - > MYSQLTEST_VARDIR/tmp/a.ibd
perl;
use strict;
use warnings;
my $innochecksum = $ENV{'INNOCHECKSUM'};
my $mysqltest_vardir= $ENV{'MYSQLTEST_VARDIR'};
my $mysqld_datadir= $ENV{'MYSQLD_DATADIR'};
exec("cat $mysqld_datadir/test/t1.ibd | $innochecksum --debug='d:o,$mysqltest_vardir/tmp/mtrchecksum.trace' --write=none - > $mysqltest_vardir/tmp/a.ibd");
EOF

perl;
use strict;
use warnings;
use File::Copy;
my $dir = $ENV{'MYSQL_TMP_DIR'};
opendir(DIR, $dir) or die $!;
my $file= 'mtrchecksum.trace';
# open file in write mode
open IN_FILE,"<", "$dir/$file" or die $!;
open OUT_FILE, ">", "$dir/tmp" or die $!;
while(<IN_FILE>) {
 #Replace all intergers to #
 $_=~ s/\d+/#/g;
 $_=~ s/crc#/crc32/g;
 $_=~ s/Filename =.+/Filename = -/g;
 $_=~ s/file .+ =/file - =/g;
 print OUT_FILE $_;
}
close(IN_FILE);
close(OUT_FILE);
#move the new content from tmp file to the orginal file.
move ("$dir/tmp", "$dir/$file");
closedir(DIR);
EOF
--echo # Print the information for debug option.
cat_file $MYSQLTEST_VARDIR/tmp/mtrchecksum.trace;

--echo # Recheck the a.ibd created file having crc32 checksum with the --strict-check=none for innochecksum tool.
--exec $INNOCHECKSUM --debug="d:o,$MYSQLTEST_VARDIR/tmp/mtrchecksum.trace" --strict-check=none $MYSQLTEST_VARDIR/tmp/a.ibd

perl;
use strict;
use warnings;
use File::Copy;
my $dir = $ENV{'MYSQL_TMP_DIR'};
opendir(DIR, $dir) or die $!;
my $file= 'mtrchecksum.trace';
# open file in write mode
open IN_FILE,"<", "$dir/$file" or die $!;
open OUT_FILE, ">", "$dir/tmp" or die $!;
while(<IN_FILE>) {
 #Replace all intergers to #
 $_=~ s/\d+/#/g;
 $_=~ s/crc#/crc32/g;
 $_=~ s/Filename =.+/Filename = a.ibd/g;
 $_=~ s/file .+ =/file t1.ibd =/g;
 print OUT_FILE $_;
}
close(IN_FILE);
close(OUT_FILE);
#move the new content from tmp file to the orginal file.
move ("$dir/tmp", "$dir/$file");
closedir(DIR);
EOF

# Print the information for debug option.
cat_file $MYSQLTEST_VARDIR/tmp/mtrchecksum.trace;

#Replace the t.ibd with the newly created a.ibd having "none" checksum.
--remove_file $MYSQLD_DATADIR/test/t1.ibd
--copy_file $MYSQLTEST_VARDIR/tmp/a.ibd $MYSQLD_DATADIR/test/t1.ibd
--remove_file $MYSQLTEST_VARDIR/tmp/a.ibd

--echo # Start the server to validate the t1.ibd having "none" checksum.
--exec echo "restart" > $MYSQLTEST_VARDIR/tmp/mysqld.1.expect
--echo # Server Started normally
--enable_reconnect
--source include/wait_until_connected_again.inc
--disable_reconnect

--echo # Shutdown the server
--exec echo "wait:" >$MYSQLTEST_VARDIR/tmp/mysqld.1.expect
--shutdown_server
--source include/wait_until_disconnected.inc
--echo # Test[3] End

--echo # Test[4] for read from standard input for innochecksum tool with rewrite of "innodb" checksum.
# Retrieve the original t1.ibd before any rewrite of checksum.
--remove_file $t1_IBD
--copy_file $MYSQLD_DATADIR/test/t1.ibd.backup $t1_IBD

--echo # Command for innochecksum too to read from stdin and rewrite the checksum to "innodb"
perl;
use strict;
use warnings;
my $innochecksum = $ENV{'INNOCHECKSUM'};
my $mysqltest_vardir= $ENV{'MYSQLTEST_VARDIR'};
my $mysqld_datadir= $ENV{'MYSQLD_DATADIR'};
exec("cat $mysqld_datadir/test/t1.ibd | $innochecksum --debug='d:o,$mysqltest_vardir/tmp/mtrchecksum.trace' --write=innodb - > $mysqltest_vardir/tmp/a.ibd");
EOF

perl;
use strict;
use warnings;
use File::Copy;
my $dir = $ENV{'MYSQL_TMP_DIR'};
opendir(DIR, $dir) or die $!;
my $file= 'mtrchecksum.trace';
# open file in write mode
open IN_FILE,"<", "$dir/$file" or die $!;
open OUT_FILE, ">", "$dir/tmp" or die $!;
while(<IN_FILE>) {
 #Replace all intergers to #
 $_=~ s/\d+/#/g;
 $_=~ s/crc#/crc32/g;
 $_=~ s/Filename =.+/Filename = -/g;
 $_=~ s/file .+ =/file - =/g;
 print OUT_FILE $_;
}
close(IN_FILE);
close(OUT_FILE);
#move the new content from tmp file to the orginal file.
move ("$dir/tmp", "$dir/$file");
closedir(DIR);
EOF
--echo # Print the information for debug option.
cat_file $MYSQLTEST_VARDIR/tmp/mtrchecksum.trace;

--echo # Recheck the a.ibd created file having crc32 checksum with the --strict-check=innodb for innochecksum tool.
--exec $INNOCHECKSUM --debug="d:o,$MYSQLTEST_VARDIR/tmp/mtrchecksum.trace" --strict-check=innodb $MYSQLTEST_VARDIR/tmp/a.ibd

perl;
use strict;
use warnings;
use File::Copy;
my $dir = $ENV{'MYSQL_TMP_DIR'};
opendir(DIR, $dir) or die $!;
my $file= 'mtrchecksum.trace';
# open file in write mode
open IN_FILE,"<", "$dir/$file" or die $!;
open OUT_FILE, ">", "$dir/tmp" or die $!;
while(<IN_FILE>) {
 #Replace all intergers to #
 $_=~ s/\d+/#/g;
 $_=~ s/crc#/crc32/g;
 $_=~ s/Filename =.+/Filename = a.ibd/g;
 $_=~ s/file .+ =/file t1.ibd =/g;
 print OUT_FILE $_;
}
close(IN_FILE);
close(OUT_FILE);
#move the new content from tmp file to the orginal file.
move ("$dir/tmp", "$dir/$file");
closedir(DIR);
EOF

# Print the information for debug option.
cat_file $MYSQLTEST_VARDIR/tmp/mtrchecksum.trace;

--echo # Replace the t.ibd with the newly created a.ibd having "innodb" checksum.
--remove_file $MYSQLD_DATADIR/test/t1.ibd
--copy_file $MYSQLTEST_VARDIR/tmp/a.ibd $MYSQLD_DATADIR/test/t1.ibd
--remove_file $MYSQLTEST_VARDIR/tmp/a.ibd

--echo # Start the server to validate the t1.ibd having "innodb" checksum.
--exec echo "restart" > $MYSQLTEST_VARDIR/tmp/mysqld.1.expect
--echo # Server Started normally
--enable_reconnect
--source include/wait_until_connected_again.inc
--disable_reconnect
--echo # Test[4] End

--echo # Test[5] for lock.
--echo # Test Scenario: As mysqld is running, & then start the innochecksum which must fail.

select * from t1;

--echo # INNOCHECKSUM MYSQLD_DATADIR/test/t1.ibd
--error 1
--exec $INNOCHECKSUM $MYSQLD_DATADIR/test/t1.ibd 2> $SEARCH_FILE
let SEARCH_PATTERN=Error: Unable to lock file:: $MYSQLD_DATADIR/test/t1.ibd;
--source include/search_pattern_in_file.inc

let SEARCH_PATTERN=fcntl: Resource temporarily unavailable;
--source include/search_pattern_in_file.inc
--remove_file $SEARCH_FILE

--echo # create a base table,Index & insert a record
CREATE TABLE tab1(c1 INT PRIMARY KEY,c2 VARCHAR(20)) ENGINE=InnoDB;
CREATE INDEX idx1 ON tab1(c2(10));
INSERT INTO tab1 VALUES(1, 'Innochecksum InnoDB1');

--exec echo "wait" > $MYSQLTEST_VARDIR/tmp/mysqld.1.expect
--shutdown_server
--source include/wait_until_disconnected.inc
--echo shutdown over
--echo # Test[a] end
--echo # Test[b] Scenario: Innochecksum is running state(had acquire lock on tab1.ibd file)
--echo # and then start the mysqld server, which must crash when it do any DDL/DML query on tab1.ibd.
--echo # Testing done by the usage of DBUG_EXECUTE_IF(), which will pool over the --page-type-dump file
--echo # passed as argument. Then start the server which will crash as explained before. Delete the
--echo # --page-type-dump file, to resume the innochecksum tool.

perl;
use strict;
use warnings;
my $innochecksum = $ENV{'INNOCHECKSUM'};
my $mysql_tmp_dir = $ENV{'MYSQL_TMP_DIR'};
my $mysqld_datadir = $ENV{'MYSQLD_DATADIR'};
my $pid = fork();
open(STDOUT, ">", "out.txt") or die "Err: $!";
open(STDERR, ">&STDOUT");
die "fork failed" unless defined $pid;
if ($pid == 0)
{
  exec("$innochecksum  --debug='d,innochecksum_cause_mysqld_crash' --page-type-dump=$mysql_tmp_dir/dummy_file $mysqld_datadir/test/tab1.ibd");
}
EOF

--echo # Restart the DB server with innodb_checksum_algorithm=InnoDB
--exec echo "restart" > $MYSQLTEST_VARDIR/tmp/mysqld.1.expect
--enable_reconnect
--source include/wait_until_connected_again.inc
--disable_reconnect

--error 2013
select * from tab1;

--error 0,1
--remove_file $MYSQLTEST_VARDIR/tmp/dummy_file

--echo # Restart the DB server with innodb_checksum_algorithm=InnoDB
--exec echo "restart" > $MYSQLTEST_VARDIR/tmp/mysqld.1.expect
--enable_reconnect
--source include/wait_until_connected_again.inc
--disable_reconnect

#cleanup
--remove_file $MYSQL_TMP_DIR/mtrchecksum.trace

DROP TABLE t1;
DROP TABLE tab1;
SET GLOBAL innodb_file_format=default;

--echo #TEST END
